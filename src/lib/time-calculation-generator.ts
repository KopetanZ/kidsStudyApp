import { Question } from '@/types';

// ÊôÇÈñìË®àÁÆóÂïèÈ°åÁî®„Éá„Éº„Çø
export interface TimeCalculationData {
  type: 'duration' | 'elapsed' | 'schedule' | 'comparison';
  startTime?: string;
  endTime?: string;
  duration?: number;  // minutes
  activity?: string;
  emoji?: string;
}

export class TimeCalculationQuestionGenerator {
  // „É¨„Éô„É´1: Á∞°Âçò„Å™ÊôÇÈñì„ÅÆÈï∑„ÅïÁêÜËß£Ôºà30ÂàÜÂçò‰ΩçÔºâ
  static generateTimeCalculationLevel1(): Question[] {
    const questions: Question[] = [];
    
    // ÊôÇÈñì„ÅÆÈï∑„ÅïË™çË≠òÂïèÈ°å
    const durations = [
      { duration: 30, activity: '„ÉÜ„É¨„Éì„Çí„Åø„Çã', emoji: 'üì∫' },
      { duration: 60, activity: '„Åì„ÅÜ„Åà„Çì„Åß„ÅÇ„Åù„Å∂', emoji: 'üéà' },
      { duration: 15, activity: '„Åä„ÇÑ„Å§„Çí„Åü„Åπ„Çã', emoji: 'üç™' },
      { duration: 45, activity: '„Åª„Çì„Çí„Çà„ÇÄ', emoji: 'üìñ' },
      { duration: 30, activity: '„Åä„Åµ„Çç„Å´„ÅØ„ÅÑ„Çã', emoji: 'üõÅ' },
      { duration: 20, activity: '„ÅØ„Åø„Åå„Åç„Çí„Åô„Çã', emoji: 'ü¶∑' }
    ];

    durations.forEach((item, index) => {
      // ÊôÇÈñì„ÅÆÈï∑„Åï„ÇíÈÅ∏„Å∂ÂïèÈ°å
      questions.push({
        id: `time-duration-${index}`,
        type: 'math',
        subtype: 'time-calculation',
        question: `${item.activity}„ÅÆ„Åò„Åã„Çì„ÅØ „Å©„ÅÆ„Åè„Çâ„ÅÑÔºü`,
        options: ['15„Å∑„Çì', '30„Å∑„Çì', '45„Å∑„Çì', '60„Å∑„Çì'],
        correctAnswer: `${item.duration}„Å∑„Çì`,
        visualAid: {
          type: 'time-duration-display',
          content: {
            activity: item.activity,
            duration: item.duration,
            emoji: item.emoji,
            showClock: true
          },
          position: 'top'
        },
        points: 15
      });
    });

    // ÊôÇÈñì„ÅÆÊØîËºÉÂïèÈ°å
    const comparisons = [
      { activity1: '„ÅØ„Åø„Åå„Åç', duration1: 5, activity2: '„Åä„Åµ„Çç', duration2: 30 },
      { activity1: '„ÅÇ„Åï„Åî„ÅØ„Çì', duration1: 15, activity2: '„Çà„Çã„Åî„ÅØ„Çì', duration2: 45 },
      { activity1: '„ÅÜ„Åü1„Åç„Çá„Åè', duration1: 3, activity2: '„ÉÜ„É¨„Éì1„Å∞„Çì„Åê„Åø', duration2: 30 }
    ];

    comparisons.forEach((comp, index) => {
      const longer = comp.duration1 > comp.duration2 ? comp.activity1 : comp.activity2;
      questions.push({
        id: `time-compare-${index}`,
        type: 'math',
        subtype: 'time-calculation',
        question: `${comp.activity1}„Å®${comp.activity2}„ÄÅ„Å©„Å°„Çâ„Åå„Å™„Åå„ÅÑ„Åò„Åã„ÇìÔºü`,
        options: [comp.activity1, comp.activity2, '„Åä„Å™„Åò', '„Çè„Åã„Çâ„Å™„ÅÑ'],
        correctAnswer: longer,
        visualAid: {
          type: 'time-comparison-display',
          content: {
            activity1: comp.activity1,
            duration1: comp.duration1,
            activity2: comp.activity2,
            duration2: comp.duration2
          },
          position: 'top'
        },
        points: 20
      });
    });

    return this.shuffleArray(questions).slice(0, 10);
  }

  // „É¨„Éô„É´2: ÊôÇÂàª„Åã„ÇâÊôÇÂàª„ÅÆË®àÁÆóÔºà1ÊôÇÈñì‰ª•ÂÜÖÔºâ
  static generateTimeCalculationLevel2(): Question[] {
    const questions: Question[] = [];
    
    // ÈñãÂßãÊôÇÂàª„Å®ÁµÇ‰∫ÜÊôÇÂàª„Åã„ÇâÊôÇÈñì„ÅÆÈï∑„Åï„ÇíÊ±Ç„ÇÅ„ÇãÂïèÈ°å
    const timeRanges = [
      { start: '9:00', end: '9:30', activity: '„Åù„ÅÜ„Åò', emoji: 'üßπ' },
      { start: '10:00', end: '11:00', activity: '„Åä„Åπ„Çì„Åç„Çá„ÅÜ', emoji: 'üìö' },
      { start: '2:00', end: '2:15', activity: '„Åä„ÇÑ„Å§', emoji: 'üçé' },
      { start: '3:00', end: '4:00', activity: '„ÅÇ„Åù„Å≥', emoji: 'üéØ' },
      { start: '6:00', end: '6:45', activity: '„Å∞„Çì„Åî„ÅØ„Çì', emoji: 'üçΩÔ∏è' },
      { start: '8:00', end: '8:20', activity: '„ÅÇ„Çâ„ÅÑ„ÇÇ„ÅÆ', emoji: 'üßΩ' }
    ];

    timeRanges.forEach((range, index) => {
      const startHour = parseInt(range.start.split(':')[0]);
      const startMinute = parseInt(range.start.split(':')[1]);
      const endHour = parseInt(range.end.split(':')[0]);
      const endMinute = parseInt(range.end.split(':')[1]);
      
      const totalMinutes = (endHour * 60 + endMinute) - (startHour * 60 + startMinute);
      
      questions.push({
        id: `time-elapsed-${index}`,
        type: 'math',
        subtype: 'time-calculation',
        question: `${range.start}„Åã„Çâ${range.end}„Åæ„Åß ${range.activity}„Çí„Åó„Åæ„Åó„Åü„ÄÇ„Å™„Çì„Å∑„Çì„Åã„ÇìÔºü`,
        options: [`${totalMinutes - 15}„Å∑„Çì`, `${totalMinutes}„Å∑„Çì`, `${totalMinutes + 15}„Å∑„Çì`, `${totalMinutes + 30}„Å∑„Çì`],
        correctAnswer: `${totalMinutes}„Å∑„Çì`,
        visualAid: {
          type: 'time-elapsed-display',
          content: {
            startTime: range.start,
            endTime: range.end,
            activity: range.activity,
            emoji: range.emoji,
            duration: totalMinutes
          },
          position: 'top'
        },
        points: 25
      });
    });

    // ÊôÇÈñì„ÇíË∂≥„ÅôÂïèÈ°å
    const additions = [
      { startTime: '10:00', addMinutes: 30, activity: '„Åï„Çì„ÅΩ' },
      { startTime: '2:15', addMinutes: 45, activity: '„Ç≤„Éº„É†' },
      { startTime: '4:00', addMinutes: 20, activity: '„Åó„ÇÖ„Åè„Å†„ÅÑ' }
    ];

    additions.forEach((add, index) => {
      const [hour, minute] = add.startTime.split(':').map(Number);
      const totalMinutes = hour * 60 + minute + add.addMinutes;
      const newHour = Math.floor(totalMinutes / 60);
      const newMinute = totalMinutes % 60;
      const endTime = `${newHour}:${newMinute.toString().padStart(2, '0')}`;

      questions.push({
        id: `time-addition-${index}`,
        type: 'math',
        subtype: 'time-calculation',
        question: `${add.startTime}„Åã„Çâ${add.addMinutes}„Å∑„Çì„Åã„Çì ${add.activity}„Çí„Åó„Åæ„Åó„Åü„ÄÇ„Åä„Çè„Å£„Åü„Åò„Åì„Åè„ÅØÔºü`,
        options: [
          `${newHour - 1}:${newMinute.toString().padStart(2, '0')}`,
          endTime,
          `${newHour + 1}:${newMinute.toString().padStart(2, '0')}`,
          `${newHour}:${(newMinute + 15).toString().padStart(2, '0')}`
        ],
        correctAnswer: endTime,
        visualAid: {
          type: 'time-addition-display',
          content: {
            startTime: add.startTime,
            addMinutes: add.addMinutes,
            endTime: endTime,
            activity: add.activity
          },
          position: 'top'
        },
        points: 30
      });
    });

    return this.shuffleArray(questions).slice(0, 10);
  }

  // „É¨„Éô„É´3: 1Êó•„ÅÆ„Çπ„Ç±„Ç∏„É•„Éº„É´„ÉªÊôÇÈñìÊÑüË¶ö
  static generateTimeCalculationLevel3(): Question[] {
    const questions: Question[] = [];
    
    // 1Êó•„ÅÆ„Çπ„Ç±„Ç∏„É•„Éº„É´ÂïèÈ°å
    const schedules = [
      {
        activities: [
          { time: '7:00', activity: '„Åç„Åå„Åà', duration: 10 },
          { time: '7:10', activity: '„ÅÇ„Åï„Åî„ÅØ„Çì', duration: 20 },
          { time: '7:30', activity: '„ÅØ„Åø„Åå„Åç', duration: 5 },
          { time: '7:35', activity: '„Åò„ÇÖ„Çì„Å≥', duration: 15 }
        ],
        question: '„Åå„Å£„Åì„ÅÜ„Å´„ÅÑ„Åè„Åò„ÇÖ„Çì„Å≥„Åå „Åä„Çè„Çã„Åò„Åì„Åè„ÅØÔºü',
        answer: '7:50'
      },
      {
        activities: [
          { time: '16:00', activity: '„Åä„ÇÑ„Å§', duration: 15 },
          { time: '16:15', activity: '„Åó„ÇÖ„Åè„Å†„ÅÑ', duration: 45 },
          { time: '17:00', activity: '„ÅÇ„Åù„Å≥', duration: 60 }
        ],
        question: '„ÅÇ„Åù„Å≥„Åå „Åä„Çè„Çã„Åò„Åì„Åè„ÅØÔºü',
        answer: '18:00'
      }
    ];

    schedules.forEach((schedule, index) => {
      questions.push({
        id: `time-schedule-${index}`,
        type: 'math',
        subtype: 'time-calculation',
        question: schedule.question,
        options: [
          schedule.answer,
          this.addMinutesToTime(schedule.answer, 15),
          this.addMinutesToTime(schedule.answer, -15),
          this.addMinutesToTime(schedule.answer, 30)
        ],
        correctAnswer: schedule.answer,
        visualAid: {
          type: 'time-schedule-display',
          content: {
            activities: schedule.activities,
            title: '„ÅÑ„Å°„Å´„Å°„ÅÆ„Çπ„Ç±„Ç∏„É•„Éº„É´'
          },
          position: 'top'
        },
        points: 35
      });
    });

    // ÊôÇÈñìÊÑüË¶öÂïèÈ°å
    const timeSense = [
      { activity: 'Â≠¶Ê†°„ÅÆ1„Åò„Åã„Çì„ÇÅ', duration: 45, unit: '„Å∑„Çì' },
      { activity: '„Åà„ÅÑ„Åå„Çí1„ÅΩ„Çì', duration: 90, unit: '„Å∑„Çì' },
      { activity: '„Çà„Çã „Å≠„Çã„Åò„Åã„Çì', duration: 8, unit: '„Åò„Åã„Çì' },
      { activity: '1„Åó„ÇÖ„ÅÜ„Åã„Çì', duration: 7, unit: '„Å´„Å°' }
    ];

    timeSense.forEach((item, index) => {
      questions.push({
        id: `time-sense-${index}`,
        type: 'math',
        subtype: 'time-calculation', 
        question: `${item.activity}„ÅØ „Å†„ÅÑ„Åü„ÅÑ „Å©„ÅÆ„Åè„Çâ„ÅÑÔºü`,
        options: [
          `${item.duration - 15}${item.unit}`,
          `${item.duration}${item.unit}`,
          `${item.duration + 15}${item.unit}`,
          `${item.duration * 2}${item.unit}`
        ],
        correctAnswer: `${item.duration}${item.unit}`,
        visualAid: {
          type: 'time-sense-display',
          content: {
            activity: item.activity,
            duration: item.duration,
            unit: item.unit
          },
          position: 'top'
        },
        points: 30
      });
    });

    return this.shuffleArray(questions).slice(0, 8);
  }

  private static addMinutesToTime(timeStr: string, minutes: number): string {
    const [hour, minute] = timeStr.split(':').map(Number);
    const totalMinutes = hour * 60 + minute + minutes;
    const newHour = Math.max(0, Math.floor(totalMinutes / 60) % 24);
    const newMinute = Math.max(0, totalMinutes % 60);
    return `${newHour}:${newMinute.toString().padStart(2, '0')}`;
  }

  static generateQuestionsByLevelId(levelId: string): Question[] {
    switch (levelId) {
      case 'time-calc-level-1':
        return this.generateTimeCalculationLevel1();
      case 'time-calc-level-2':
        return this.generateTimeCalculationLevel2();
      case 'time-calc-level-3':
        return this.generateTimeCalculationLevel3();
      default:
        return this.generateTimeCalculationLevel1();
    }
  }

  private static shuffleArray<T>(array: T[]): T[] {
    const shuffled = [...array];
    for (let i = shuffled.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled;
  }
}

// ÊôÇÈñìË®àÁÆóÁî®Ë¶ñË¶öÂåñÈñ¢Êï∞
export const generateTimeCalculationVisual = (question: Question): string => {
  if (!question.visualAid) {
    return '';
  }

  // ÊôÇÈñì„ÅÆÈï∑„ÅïË°®Á§∫
  if (question.visualAid.type === 'time-duration-display') {
    const { activity, duration, emoji, showClock } = question.visualAid.content as {
      activity: string;
      duration: number;
      emoji: string;
      showClock: boolean;
    };

    const hours = Math.floor(duration / 60);
    const minutes = duration % 60;
    const timeDisplay = hours > 0 ? `${hours}„Åò„Åã„Çì${minutes}„Å∑„Çì` : `${minutes}„Å∑„Çì`;

    return `
      <div class="bg-gradient-to-br from-blue-50 to-cyan-50 rounded-2xl p-6 mb-4 shadow-lg">
        <div class="text-center mb-4">
          <div class="text-6xl mb-3">${emoji}</div>
          <div class="text-xl font-bold text-gray-800">${activity}</div>
        </div>
        
        ${showClock ? `
        <div class="flex justify-center mb-4">
          <div class="bg-white rounded-xl p-4 shadow-lg">
            <div class="text-4xl font-bold text-blue-600">${timeDisplay}</div>
          </div>
        </div>
        ` : ''}
        
        <div class="bg-white rounded-xl p-4 shadow-inner">
          <div class="flex items-center justify-center gap-2">
            <div class="w-4 h-4 bg-blue-500 rounded-full animate-pulse"></div>
            <div class="text-lg text-gray-700">„Å©„ÅÆ„Åè„Çâ„ÅÑ„ÅÆ „Åò„Åã„Çì „Åã„Åã„Çã„Åã„Å™Ôºü</div>
          </div>
        </div>
      </div>
    `;
  }

  // ÊôÇÈñìÊØîËºÉË°®Á§∫
  if (question.visualAid.type === 'time-comparison-display') {
    const { activity1, duration1, activity2, duration2 } = question.visualAid.content as {
      activity1: string;
      duration1: number;
      activity2: string;
      duration2: number;
    };

    return `
      <div class="bg-gradient-to-br from-green-50 to-teal-50 rounded-2xl p-6 mb-4 shadow-lg">
        <div class="text-center text-lg font-bold text-gray-700 mb-4">„Åò„Åã„Çì„ÅÆ „Å™„Åå„Åï„Çí „Åè„Çâ„Åπ„Çà„ÅÜ</div>
        
        <div class="grid grid-cols-2 gap-4 mb-4">
          <div class="bg-white rounded-xl p-4 shadow-lg text-center">
            <div class="text-lg font-bold text-blue-600 mb-2">${activity1}</div>
            <div class="text-2xl font-bold text-gray-800">${duration1}„Å∑„Çì</div>
            <div class="mt-2">
              ${Array.from({length: Math.min(duration1 / 5, 10)}, () => '<div class="inline-block w-2 h-6 bg-blue-400 rounded mr-1"></div>').join('')}
            </div>
          </div>
          
          <div class="bg-white rounded-xl p-4 shadow-lg text-center">
            <div class="text-lg font-bold text-green-600 mb-2">${activity2}</div>
            <div class="text-2xl font-bold text-gray-800">${duration2}„Å∑„Çì</div>
            <div class="mt-2">
              ${Array.from({length: Math.min(duration2 / 5, 10)}, () => '<div class="inline-block w-2 h-6 bg-green-400 rounded mr-1"></div>').join('')}
            </div>
          </div>
        </div>
        
        <div class="text-center text-sm text-gray-600">
          „Å©„Å°„Çâ„Åå „Å™„Åå„ÅÑ „Åò„Åã„Çì „Åß„Åó„Çá„ÅÜÔºü
        </div>
      </div>
    `;
  }

  // ÁµåÈÅéÊôÇÈñìË°®Á§∫
  if (question.visualAid.type === 'time-elapsed-display') {
    const { startTime, endTime, activity, emoji, duration } = question.visualAid.content as {
      startTime: string;
      endTime: string;
      activity: string;
      emoji: string;
      duration: number;
    };

    return `
      <div class="bg-gradient-to-br from-purple-50 to-pink-50 rounded-2xl p-6 mb-4 shadow-lg">
        <div class="text-center mb-4">
          <div class="text-4xl mb-2">${emoji}</div>
          <div class="text-xl font-bold text-gray-800">${activity}</div>
        </div>
        
        <div class="flex items-center justify-center gap-4 mb-4">
          <div class="bg-white rounded-xl p-4 shadow-lg text-center">
            <div class="text-sm text-gray-600 mb-1">„ÅØ„Åò„Åæ„Çä</div>
            <div class="text-2xl font-bold text-purple-600">${startTime}</div>
          </div>
          
          <div class="flex flex-col items-center">
            <div class="text-2xl">‚è∞</div>
            <div class="text-sm text-gray-600">Ôºü„Å∑„Çì</div>
          </div>
          
          <div class="bg-white rounded-xl p-4 shadow-lg text-center">
            <div class="text-sm text-gray-600 mb-1">„Åä„Çè„Çä</div>
            <div class="text-2xl font-bold text-pink-600">${endTime}</div>
          </div>
        </div>
        
        <div class="text-center bg-white rounded-xl p-3 shadow-inner">
          <div class="text-lg text-gray-700">„Å™„Çì„Å∑„Çì„Åã„Çì „Åó„Åü„Åß„Åó„Çá„ÅÜÔºü</div>
        </div>
      </div>
    `;
  }

  // „Çπ„Ç±„Ç∏„É•„Éº„É´Ë°®Á§∫
  if (question.visualAid.type === 'time-schedule-display') {
    const { activities, title } = question.visualAid.content as {
      activities: Array<{ time: string; activity: string; duration: number }>;
      title: string;
    };

    return `
      <div class="bg-gradient-to-br from-orange-50 to-yellow-50 rounded-2xl p-6 mb-4 shadow-lg">
        <div class="text-center text-xl font-bold text-gray-800 mb-4">${title}</div>
        
        <div class="space-y-3 mb-4">
          ${activities.map((act, index) => `
            <div class="bg-white rounded-xl p-3 shadow-lg flex items-center gap-4">
              <div class="text-lg font-bold text-orange-600 min-w-[60px]">${act.time}</div>
              <div class="flex-1 text-lg text-gray-800">${act.activity}</div>
              <div class="text-sm text-gray-600">${act.duration}„Å∑„Çì</div>
            </div>
          `).join('')}
        </div>
        
        <div class="text-center bg-white rounded-xl p-3 shadow-inner">
          <div class="text-lg text-gray-700">„Åú„Çì„Å∂ „Åä„Çè„Çã„ÅÆ„ÅØ „Å™„Çì„ÅòÔºü</div>
        </div>
      </div>
    `;
  }

  return '';
};